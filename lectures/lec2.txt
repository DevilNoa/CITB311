Списъци  и кортежи 

Командата принт може да приема множество параметри който трябва да се разделят със запетая 
answer = 42
question = "about the life, universe and everything"

print("the answer of the question", question, "is", answer) #36/39

присвояване
a,b,c = 1,2,3
При С езиците присвояването:
b=a
a=c
c=b
В Python:
a, b = b, a
a, b, c = 1, 2, 3
print(a, b, c)
a, c = c, a
print(a, b, c)

пример за if else и разликата от дигите С езици 

password = 123456
if password == 123456:
    print("welcome!")
else:
    print("wrong pass")  #47/51

друга разлика от С езиците е командата elif за разлика от else if 
num=int(input('enter a number: '))
if num>0:
    print(num," The number is positive")
elif num<0:
    print("the number is negative")
else:
    print("the number is zero")  #53/59


сравнителни оператори
имаме възможността да сравняваме и две различни неща който имат различни int и string  
a = [1, 2, 3, 'four']
b = [1, 2, 3]
print(a == b)
b.append('four')
print(a == b)  # 61/65
с функцията append имаме възможността да добавим  различни int , string , loating-point number
 стойности интерпретирани като булева неистина: false , none,  0,  "", (), [],{}
стойности интерпретирани като булева истина: true, 1, 2, "qq", (1,2), [1,1], {a:1,b:2}

в python има 6 вградени типа за наредени последователности но двете най-разпространени са списъци и кортежи. И основната разлика между тях е че списъците могат да се манипулират, докато кортежите не могат 
Ivan=['Ivan Andonov', 35]
Toni=['Antoaneta petkova', 41]
database = [Ivan , Toni]
print(database)  #67/70

Повечето операции работят върху всякакви редици включително: списъци ,кортежи, низове
Индексиране с него можем да извлечем елемент езика работи от отдясно на ляво тоест последният елемент е -1 а не -0 понеже -0=0
greeting = "Hello"
print(greeting[0], greeting[1], greeting[2], greeting[3], greeting[4])
print(greeting[-1], greeting[-2], greeting[-3], greeting[-4], greeting[-5])
print(greeting[-0],greeting[0])  #72/75

срезове те не дават бърз събстринг вместо да пишем всичко по отделно 
tag = '<a href="http://www.python.org">Python web site</a>'
print(tag[9:30])
print(tag[32:-4])
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(numbers[7:10])
print(numbers[-3:-1])  #Липсва стойността 10
print(numbers[-3:0])  #Последователността е празна
print(numbers[-3:]) #трикът е тук в :
print(numbers[:3])
print(numbers[:])  #можем да го използваме ако ни се налага да копираме списък 
## 77/86 



по-големи стъпки като стъпките не могат да са 0леви но може да са отрицателни 
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(numbers[0:10:1])
print(numbers[0:10:2])
print(numbers[::4])
print(numbers[8:3:-1])
print(numbers[10:0:-2]) #89/94

Добавяне на последователности 
print([1,2,3]+[4,5,6])
print('hello '+'world')
#print([1,2,3+'world']) ако направим нещо такова ще ни изхвърли проблем #96/98
 
умножение 
print('pytone'*5)
print([420]*10) #100/101

non или така нареченият празен списък 
sequence = [None]*10
print(sequence)  #103/104

принадлежност 
permissions = 'rw'
print('w' in permissions)
print('x' in permissions)
print("~~"*10)
users = ['Ivan', 'Petkan', 'Dragan']
students = ['Ivan', 'Petkan', 'Dragan']
print('Stpyan' in users)
print('Ivan' in users)
print("~~"*10)
mailSubject='buy cheap viagra now!!!'
print('viagra' in mailSubject)  #106/116
 
дължина, минимална и максимална стойност 
numbers = [100,34,678]
print(len(numbers))
print(max(numbers))
print(min(numbers))
print("~~"*10)
print(max(2,3))
print(min(9,3,2,5))
print("~~"*10)
print(list('Hello'))  # създаване на списък от редица #118/126
 
Базови операции 
Можем да прилагаме стандартни опр върху списъци, и можем да ги модифицираме 
Присвояване на елемент 
students = ['Ivan','Petkan', 'Dragan']
print(students[0])
students[0]='Stoyan'
print(students[0])
print(students)  #128/132

изтриване на елементи
subjects = ['summer vacation offer','your salary for september','report for new students ASAP']
# print(subjects)
# del subjects[2]
# print(subjects)  #134/137
 
присвояване на отрязъци 
name = list ('Nikola Bukov')
print(name)
name[6:]=list('Schwarzenegger')
print(name) #139/142

копиране
a = [1,2,3]
b=a
print(a)
print(b)
print('~~'*10)
a.append(4)
print(a)
print(b) # 144/151

методи
Count метод 
chores=['clean the blackboard','open the windows','throw the garbage']
chores.append('close he door')
print(chores) #153/155

print(['to', 'bee', 'or', 'not', 'to', 'bee'].count('to'))
print([[1, 2], 1, 1, [1, 2]].count(1))  #157/158

extend метод 
a = [1, 2, 3]
b = [4, 5, 6]
a.extend(b)
print(a)  #160/163
index метод 

innovationRating=['Sweden', 'Germany', 'Denmark','Finland', 'Netherlands', 'Luxembourg', 'Belgium', 'UK','Austria', 'Ireland', 'France', 'Slovenia', 'Cyprus', 'Estonia','Italy', 'Spain', 'Portugal', 'Chech republic', 'Greece', 'Slovakia','Hungary', 'Malta', 'Litva', 'Poland', 'Latvia', 'Romania','Bulgaria']
print("Bulgaria is on ", innovationRating.index('Bulgaria')+1,'place from',len(innovationRating))  #165/166
важно за index е  ако изброяваме нещо може да ни се налага да добавим +1 понеже бройм от 0 

insert метод 
numbers = [1, 2, 3, 5, 6, 7]
print(numbers)
print('~~' * 10)
numbers.insert(3, 'four')
print(numbers)  #168/172

pop метод
print(innovationRating)
print('~~' * 10)
innovationRating.pop()
print(innovationRating)
този метод премахва последният елемент от списъкът 
remove метод 
h = ['two', 'bee', 'or', 'not', 'two', 'bee']
print(h)
print(space)
h.remove('bee')
print(h)  #179/183

reverse метод

print(innovationRating)
print(space)
innovationRating.reverse()
print(innovationRating)  # 185/188
sort метод 
този метод не сортира списък а сортира извиканият списък
c = ['Italy', 'Bulgaria', 'Spain', 'Germany', 'France']
print(c)
print(space)
c.sort(key=len, reverse=True)
print(c) #193/197

blist

кортежи
те са последователности като списъците но не могат да се променят 
символните низове също не могат да се променят 
празен кортеж се пише в () но ако искаме кортеж с единична стойност трябва да има запетайка (21,)
print(tuple([1, 2, 3]))
print(space)
print(tuple(['a', 'b', 'c']))
print(space)
print(tuple((1, 2, 3)))  #199/203  

цикли 
най-често ги използваме като се налага да обхождаме или да правим нещо със всеки елемент на множеството  функцията работи като включва първият елемент но изключва последният то генерира от 0 до числото преди стойността на елемента  
