Списъци  и кортежи 

Командата принт може да приема множество параметри който трябва да се разделят със запетая 
answer = 42
question = "about the life, universe and everything"

print("the answer of the question", question, "is", answer) #36/39

присвояване
a,b,c = 1,2,3
При С езиците присвояването:
b=a
a=c
c=b
В Python:
a, b = b, a
a, b, c = 1, 2, 3
print(a, b, c)
a, c = c, a
print(a, b, c)

пример за if else и разликата от дигите С езици 

password = 123456
if password == 123456:
    print("welcome!")
else:
    print("wrong pass")  #47/51

друга разлика от С езиците е командата elif за разлика от else if 
num=int(input('enter a number: '))
if num>0:
    print(num," The number is positive")
elif num<0:
    print("the number is negative")
else:
    print("the number is zero")  #53/59


сравнителни оператори
имаме възможността да сравняваме и две различни неща който имат различни int и string  
a = [1, 2, 3, 'four']
b = [1, 2, 3]
print(a == b)
b.append('four')
print(a == b)  # 61/65
с функцията append имаме възможността да добавим  различни int , string , loating-point number
 стойности интерпретирани като булева неистина: false , none,  0,  "", (), [],{}
стойности интерпретирани като булева истина: true, 1, 2, "qq", (1,2), [1,1], {a:1,b:2}

в python има 6 вградени типа за наредени последователности но двете най-разпространени са списъци и кортежи. И основната разлика между тях е че списъците могат да се манипулират, докато кортежите не могат 
Ivan=['Ivan Andonov', 35]
Toni=['Antoaneta petkova', 41]
database = [Ivan , Toni]
print(database)  #67/70

Повечето операции работят върху всякакви редици включително: списъци ,кортежи, низове
Индексиране с него можем да извлечем елемент езика работи от отдясно на ляво тоест последният елемент е -1 а не -0 понеже -0=0
greeting = "Hello"
print(greeting[0], greeting[1], greeting[2], greeting[3], greeting[4])
print(greeting[-1], greeting[-2], greeting[-3], greeting[-4], greeting[-5])
print(greeting[-0],greeting[0])  #72/75

срезове те не дават бърз събстринг вместо да пишем всичко по отделно 
tag = '<a href="http://www.python.org">Python web site</a>'
print(tag[9:30])
print(tag[32:-4])
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(numbers[7:10])
print(numbers[-3:-1])  #Липсва стойността 10
print(numbers[-3:0])  #Последователността е празна
print(numbers[-3:]) #трикът е тук в :
print(numbers[:3])
print(numbers[:])  #можем да го използваме ако ни се налага да копираме списък 
## 77/86 



по-големи стъпки като стъпките не могат да са 0леви но може да са отрицателни 
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(numbers[0:10:1])
print(numbers[0:10:2])
print(numbers[::4])
print(numbers[8:3:-1])
print(numbers[10:0:-2]) #89/94

Добавяне на последователности 
print([1,2,3]+[4,5,6])
print('hello '+'world')
#print([1,2,3+'world']) ако направим нещо такова ще ни изхвърли проблем #96/98
 
умножение 
print('pytone'*5)
print([420]*10) #100/101

non или така нареченият празен списък 
sequence = [None]*10
print(sequence)  #103/104

принадлежност 
permissions = 'rw'
print('w' in permissions)
print('x' in permissions)
print("~~"*10)
users = ['Ivan', 'Petkan', 'Dragan']
students = ['Ivan', 'Petkan', 'Dragan']
print('Stpyan' in users)
print('Ivan' in users)
print("~~"*10)
mailSubject='buy cheap viagra now!!!'
print('viagra' in mailSubject)  #106/116
 
дължина, минимална и максимална стойност 
numbers = [100,34,678]
print(len(numbers))
print(max(numbers))
print(min(numbers))
print("~~"*10)
print(max(2,3))
print(min(9,3,2,5))
print("~~"*10)
print(list('Hello'))  # създаване на списък от редица #118/126

